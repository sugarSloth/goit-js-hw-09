{"mappings":"oeACA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAuCtC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAhDKL,EAAOa,iBAEfC,UAAUC,IAAI,OAExBf,EAAOgB,iBAAiB,UAExB,SAA2BC,GACzBA,EAAMC,iBAEN,MAAQb,MAAAc,EAAKC,KAAEA,EAAIC,OAAEA,GAiBvB,SAA0BJ,GACxB,MAAMZ,EAAQiB,OAAOL,EAAMM,cAAcC,SAASnB,MAAMoB,OAClDL,EAAOE,OAAOL,EAAMM,cAAcC,SAASJ,KAAKK,OAChDJ,EAASC,OAAOL,EAAMM,cAAcC,SAASH,OAAOI,OAE1D,GAAIC,MAAMrB,IAAUqB,MAAMN,IAASM,MAAML,GACvC,MAAM,IAAIM,MAAM,uBAGlB,MAAO,C,MAAEtB,E,KAAOe,E,OAAMC,E,CA1BUO,CAAiBX,GAEjD,IAAK,IAAIY,EAAW,EAAGA,GAAYR,EAAQQ,IAAY,CAGrD1B,EAAc0B,EAFOV,GAASU,EAAW,GAAKT,GAG3CU,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBP,EAAAiC,OAAOC,QAAQ,uBAAqB5B,QAAiBC,MAAU,IAEhE4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBP,EAAAiC,OAAOG,QAAQ,sBAAoB9B,QAAeC,MAAU,G,CAIlEY,EAAMM,cAAcY,O","sources":["src/js/03-promises.js"],"sourcesContent":["\r\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\r\n\r\nconst formEl = document.querySelector('.form');\r\nconst submitBtn = formEl.lastElementChild;\r\n\r\nsubmitBtn.classList.add('btn');\r\n\r\nformEl.addEventListener('submit', formSubmitHandler);\r\n\r\nfunction formSubmitHandler(event) {\r\n  event.preventDefault();\r\n\r\n  const { delay, step, amount } = formValuesPicker(event);\r\n\r\n  for (let position = 1; position <= amount; position++) {\r\n    const promiseDelay = delay + (position - 1) * step;\r\n\r\n    createPromise(position, promiseDelay)\r\n      .then(({ position, delay }) => {\r\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\r\n      })\r\n      .catch(({ position, delay }) => {\r\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);      \r\n      });\r\n  }     \r\n\r\n  event.currentTarget.reset();\r\n}\r\n\r\nfunction formValuesPicker(event) {\r\n  const delay = Number(event.currentTarget.elements.delay.value);\r\n  const step = Number(event.currentTarget.elements.step.value);\r\n  const amount = Number(event.currentTarget.elements.amount.value);\r\n\r\n  if (isNaN(delay) || isNaN(step) || isNaN(amount)) {\r\n    throw new Error('Invalid form values');\r\n  }\r\n\r\n  return { delay, step, amount };\r\n}\r\n\r\nfunction createPromise(position, delay) {\r\n  return new Promise((resolve, reject) => {\r\n    const shouldResolve = Math.random() > 0.3;\r\n\r\n    setTimeout(() => {\r\n      if (shouldResolve) {\r\n        resolve({ position, delay });\r\n      } else {\r\n        reject({ position, delay });\r\n      }\r\n    }, delay);        \r\n  }) \r\n}\r\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","lastElementChild","classList","add","addEventListener","event","preventDefault","delay1","step","amount","Number","currentTarget","elements","value","isNaN","Error","$47d4ff9957288465$var$formValuesPicker","position1","then","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.797a7e06.js.map"}